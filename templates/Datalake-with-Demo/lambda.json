{
    "Description": "Creating Lambda,api gateway,Cognito,uploading properties file to s3",
    "AWSTemplateFormatVersion": "2010-09-09",
    "Resources": {
        "ConfFileGeneratorFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import cfnresponse",
                                "try:",
                                "    import ConfigParser as parser",
                                "except:",
                                "    import  configparser as  parser",
                                "import boto3",
                                "def handler(event, context):",
                                "    if event['RequestType'] == 'Create':",
                                "        try:",
                                "            config = parser.RawConfigParser()",
                                "            config.add_section('aws')",
                                "            config.set('aws', 'lambda_execution_role', event['ResourceProperties']['RoleARN'])",
                                "            config.set('aws', 'destination_bucket_name', event['ResourceProperties']['DestinationStaticResourceBucket'])",
                                "            config.set('aws', 'aws_cognito_pool_arn', event['ResourceProperties']['UserPoolARN'])",
                                "            config.set('aws', 'aws_cognito_pool_name', event['ResourceProperties']['UserPoolName'])",
                                "            config.set('aws', 'aws_kaa_app1', event['ResourceProperties']['KinesisApplicationName1'])",
                                "            config.set('aws', 'aws_kaa_app2', event['ResourceProperties']['KinesisApplicationName2'])",
                                "            config.set('aws', 'aws_kaa_firehose1', event['ResourceProperties']['Firehose1'])",
                                "            config.set('aws', 'aws_kaa_firehose2', event['ResourceProperties']['Firehose2'])",
                                "            config.set('aws', 'aws_kaa_firehose3', event['ResourceProperties']['Firehose3'])",
                                "            config.set('aws', 'aws_kaa_firehose4', event['ResourceProperties']['Firehose4'])",
                                "            config.set('aws', 'RedshiftUsername', event['ResourceProperties']['RedshiftUsername'])",
                                "            config.set('aws', 'RedshiftPassword', event['ResourceProperties']['RedshiftPassword'])",
                                "            config.set('aws', 'RawCrawler', event['ResourceProperties']['RawCrawler'])",
                                "            config.set('aws', 'RawToTransformedJob', event['ResourceProperties']['RawToTransformedJob'])",
                                "            config.set('aws', 'TransformedCrawler', event['ResourceProperties']['TransformedCrawler'])",
                                "            config.set('aws', 'PublishedCrawler', event['ResourceProperties']['PublishedCrawler'])",
                                "            config.set('aws', 'RedshiftCrawler', event['ResourceProperties']['RedshiftCrawler'])",
                                "            config.set('aws', 'TransformedToPublishedJob', event['ResourceProperties']['TransformedToPublishedJob'])",
                                "            config.set('aws', 'TransformedToRedshiftJob', event['ResourceProperties']['TransformedToRedshiftJob'])",
                                "            config.set('aws', 'RedshiftAnalyticsQueriesJob', event['ResourceProperties']['RedshiftAnalyticsQueriesJob'])",
                                "            config.set('aws', 'RedshiftToTransformedJob', event['ResourceProperties']['RedshiftToTransformedJob'])",
                                "            config.set('aws', 'glue_endpoint', event['ResourceProperties']['GlueEndPOint'])",
                                "            config.set('aws', 'ConnectionURL', event['ResourceProperties']['ConnectionURL'])",
                                "            config.set('aws', 'region', event['ResourceProperties']['Region'])",
                                "            config.set('aws', 'redshift_spectrum_create_external_schema_job', event['ResourceProperties']['RedshiftSpectrumCreateExternalSchemaJob'])",
                                "            config.set('aws', 'KibanaURL', event['ResourceProperties']['KibanaURL'])",
                                "            config.set('aws', 'RawBucket', event['ResourceProperties']['RawBucket'])",								
                                "            config.set('aws', 'properties_file_name','appconfig.ini')",
                                "            with open('/tmp/appconfig.ini', 'w') as configfile:",
                                "               config.write(configfile)",
                                "            fileName ='appconfig.ini'",
                                "            destination_bucketName = event['ResourceProperties']['DestinationStaticResourceBucket']",
                                "            s3 = boto3.resource('s3')",
                                "            s3.meta.client.upload_file('/tmp/appconfig.ini', destination_bucketName, fileName,ExtraArgs={'ACL':'public-read'})",
                                "            print 'RequestType Create'",
                                "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {})",
                                "        except ClientError as e:",
                                "            print(e)",
                                "            return cfnresponse.send(event, context, cfnresponse.FAILED, {})",
                                "    else:",
                                "        return cfnresponse.send(event, context, cfnresponse.FAILED, {})"
                            ]
                        ]
                    }
                },
                "Handler": "index.handler",
                "Runtime": "python2.7",
                "MemorySize": 512,
                "Timeout": 300,
                "Role": {
                    "Ref": "RoleARN"
                }
            }
        },
        "InvokeFunction": {
            "Type": "Custom::LambdaCall",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "ConfFileGeneratorFunction",
                        "Arn"
                    ]
                },
                "RoleARN": {
                    "Ref": "RoleARN"
                },
                "DestinationStaticResourceBucket": {
                    "Ref": "DestinationResourceBucket"
                },
				"RawBucket": {
                    "Ref": "RawBucket"
                },
                "UserPoolARN": {
                    "Ref": "UserPoolARN"
                },
                "UserPoolName": {
                    "Ref": "UserPoolName"
                },
                "KinesisApplicationName1": {
                    "Ref": "DataCleaningApplication"
                },
                "KinesisApplicationName2": {
                    "Ref": "DataAggregationApplication"
                },
                "Firehose1": {
                    "Ref": "DataCleaningInputStream"
                },
                "Firehose2": {
                    "Ref": "DataCleaningOutputStream"
                },
                "Firehose3": {
                    "Ref": "DataAggregationOutputStream1"
                },
                "Firehose4": {
                    "Ref": "DataAggregationOutputStream2"
                },
                "RawCrawler": {
                    "Ref": "RawCrawler"
                },
                "RawToTransformedJob": {
                    "Ref": "RawToTransformedJob"
                },
                "TransformedCrawler": {
                    "Ref": "TransformedCrawler"
                },
                "PublishedCrawler": {
                    "Ref": "PublishedCrawler"
                },
                "RedshiftCrawler": {
                    "Ref": "RedshiftCrawler"
                },
                "TransformedToPublishedJob": {
                    "Ref": "TransformedToPublishedJob"
                },
                "TransformedToRedshiftJob": {
                    "Ref": "TransformedToRedshiftJob"
                },
                "RedshiftAnalyticsQueriesJob": {
                    "Ref": "RedshiftAnalyticsQueriesJob"
                },
                "RedshiftToTransformedJob": {
                    "Ref": "RedshiftToTransformedJob"
                },
                "ConnectionURL": {
                    "Ref": "ConnectionURL"
                },
                "RedshiftUsername": {
                    "Ref": "RedshiftUsername"
                },
                "RedshiftPassword": {
                    "Ref": "RedshiftPassword"
                },
                "Region": {
                    "Ref": "AWS::Region"
                },
                "RedshiftSpectrumCreateExternalSchemaJob": {
                    "Ref": "RedshiftSpectrumCreateExternalSchemaJob"
                },
                "KibanaURL": {
                    "Ref": "KibanaURL"
                },
                "GlueEndPOint": {
                    "Ref": "GlueEndPOint"
                }
            }
        },
        "StaticResourceCopy": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import boto3",
                                "import json",
                                "import cfnresponse",
                                "from boto3 import client",
                                "s3 = boto3.resource('s3')",
                                "conn = client('s3')  # again assumes boto.cfg setup, assume AWS S3",
                                "def handler(event, context):",
                                "    if event['RequestType'] == 'Create':",
                                "        destination_bucket_name=event['ResourceProperties']['DestinationStaticResourceBucket']",
                                "        data={}",
                                "        data['userPoolId']=event['ResourceProperties']['USERPOOLID']",
                                "        data['userPoolClientId']=event['ResourceProperties']['USERPOOLCLIENTID']",
                                "        data['api']=event['ResourceProperties']['ENDPOINTURL']",
                                "        data['region']=event['ResourceProperties']['Region']",
                                "        data['identityPoolId']=event['ResourceProperties']['IdentityPoolId']",
                                "        data['userPoolProviderName']=event['ResourceProperties']['UserPoolProviderName']",
                                "        data['kinesisapplicationname1']=event['ResourceProperties']['AppName1']",
                                "        data['kinesisapplicationname2']=event['ResourceProperties']['AppName2']",
                                "        data['firehose1']=event['ResourceProperties']['KinesisFirehose1']",
                                "        data['firehose2']=event['ResourceProperties']['KinesisFirehose2']",
                                "        data['firehose3']=event['ResourceProperties']['KinesisFirehose3']",
                                "        data['firehose4']=event['ResourceProperties']['KinesisFirehose4']",
                                "        data['RedshiftUsername']=event['ResourceProperties']['RedshiftUsername']",
                                "        data['RedshiftPassword']=event['ResourceProperties']['RedshiftPassword']",
                                "        data['RawCrawler']=event['ResourceProperties']['RawCrawler']",
                                "        data['RawToTransformedJob']=event['ResourceProperties']['RawToTransformedJob']",
                                "        data['TransformedCrawler']=event['ResourceProperties']['TransformedCrawler']",
                                "        data['PublishedCrawler']=event['ResourceProperties']['PublishedCrawler']",
                                "        data['RedshiftCrawler']=event['ResourceProperties']['RedshiftCrawler']",
                                "        data['TransformedToPublishedJob']=event['ResourceProperties']['TransformedToPublishedJob']",
                                "        data['TransformedToRedshiftJob']=event['ResourceProperties']['TransformedToRedshiftJob']",
                                "        data['RedshiftAnalyticsQueriesJob']=event['ResourceProperties']['RedshiftAnalyticsQueriesJob']",
                                "        data['RedshiftToTransformedJob']=event['ResourceProperties']['RedshiftToTransformedJob']",
                                "        data['ConnectionURL']=event['ResourceProperties']['ConnectionURL']",
                                "        data['RedshiftSpectrumCreateExternalSchemaJob']=event['ResourceProperties']['RedshiftSpectrumCreateExternalSchemaJob']",
                                "        data['KibanaURL'] = event['ResourceProperties']['KibanaURL']",
                                "        data['StreamMetaDataURL'] = event['ResourceProperties']['StreamMetaDataURL']",
                                "        print('Json data to be written in js file:',data)",
                                "        try:",
                                "            with open('/tmp/config.js', 'w') as file:",
                                "                file.writelines('window._config = ')",
                                "                json.dump(data, file)",
                                "                file.writelines(';')",
                                "            s3.meta.client.upload_file('/tmp/config.js', destination_bucket_name,'static/js/config.js',ExtraArgs={'ACL':'public-read'})",
                                "            print 'success from static resource '",
                                "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {})",
                                "        except IOError as e:",
                                "            print('Error Occured while js file writing ',e)",
                                "            return cfnresponse.send(event, context, cfnresponse.FAILED, {})",
                                "    else:",
                                "        return cfnresponse.send(event, context, cfnresponse.FAILED, {})"
                            ]
                        ]
                    }
                },
                "Handler": "index.handler",
                "Runtime": "python2.7",
                "MemorySize": 3008,
                "Timeout": 300,
                "Role": {
                    "Ref": "RoleARN"
                }
            }
        },
        "InvokeStaticResourceCopy": {
            "Type": "Custom::LambdaCall",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StaticResourceCopy",
                        "Arn"
                    ]
                },
                "RoleARN": {
                    "Ref": "RoleARN"
                },
                "DestinationStaticResourceBucket": {
                    "Ref": "DestinationResourceBucket"
                },
                "USERPOOLID": {
                    "Ref": "USERPOOLID"
                },
                "USERPOOLCLIENTID": {
                    "Ref": "USERPOOLCLIENTID"
                },
                "ENDPOINTURL": {
                    "Value": {
                        "Ref": "ENDPOINTURL"
                    }
                },
                "Region": {
                    "Value": {
                        "Ref": "AWS::Region"
                    }
                },
                "IdentityPoolId": {
                    "Ref": "IdentityPoolId"
                },
                "UserPoolProviderName": {
                    "Ref": "UserPoolProviderName"
                },
                "UserPoolName": {
                    "Ref": "UserPoolName"
                },
                "UserPoolARN": {
                    "Ref": "UserPoolARN"
                },
                "AppName1": {
                    "Ref": "DataCleaningApplication"
                },
                "AppName2": {
                    "Ref": "DataAggregationApplication"
                },
                "KinesisFirehose1": {
                    "Ref": "DataCleaningInputStream"
                },
                "KinesisFirehose2": {
                    "Ref": "DataCleaningOutputStream"
                },
                "KinesisFirehose3": {
                    "Ref": "DataAggregationOutputStream1"
                },
                "KinesisFirehose4": {
                    "Ref": "DataAggregationOutputStream2"
                },
                "RawCrawler": {
                    "Ref": "RawCrawler"
                },
                "RawToTransformedJob": {
                    "Ref": "RawToTransformedJob"
                },
                "TransformedCrawler": {
                    "Ref": "TransformedCrawler"
                },
                "PublishedCrawler": {
                    "Ref": "PublishedCrawler"
                },
                "RedshiftCrawler": {
                    "Ref": "RedshiftCrawler"
                },
                "TransformedToPublishedJob": {
                    "Ref": "TransformedToPublishedJob"
                },
                "TransformedToRedshiftJob": {
                    "Ref": "TransformedToRedshiftJob"
                },
                "RedshiftAnalyticsQueriesJob": {
                    "Ref": "RedshiftAnalyticsQueriesJob"
                },
                "RedshiftToTransformedJob": {
                    "Ref": "RedshiftToTransformedJob"
                },
                "ConnectionURL": {
                    "Ref": "ConnectionURL"
                },
                "RedshiftUsername": {
                    "Ref": "RedshiftUsername"
                },
                "RedshiftPassword": {
                    "Ref": "RedshiftPassword"
                },
                "RedshiftSpectrumCreateExternalSchemaJob": {
                    "Ref": "RedshiftSpectrumCreateExternalSchemaJob"
                },
                "KibanaURL": {
                    "Ref": "KibanaURL"
                },
                "StreamMetaDataURL": {
                    "Ref": "StreamMetaDataURL"
                }
            }
        },
        "AddUserResourcesFunction": {
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import cfnresponse",
                                "import boto3",
                                "",
                                "",
                                "def handler(event, context):",
                                "    region = event['ResourceProperties']['Region']",
                                "    cognito_client = boto3.client('cognito-idp',region_name=region)",
                                "    user_pool_id= event['ResourceProperties']['USERPOOLID']",
                                "    user_name = event['ResourceProperties']['AppUsername']",
                                "    user_password= event['ResourceProperties']['AppPassword']",
                                "    client_id= event['ResourceProperties']['USERPOOLCLIENTID']",
                                "    if event['RequestType'] == 'Create':",
                                "        try:",
                                "           response = cognito_client.sign_up(",
                                "               ClientId= client_id,",
                                "               Username= user_name,",
                                "               Password= user_password",
                                "           )",
                                "           response1 = cognito_client.admin_confirm_sign_up(",
                                "               UserPoolId= user_pool_id,",
                                "               Username= user_name",
                                "           )",
                                "           return cfnresponse.send(event, context, cfnresponse.SUCCESS, {})",
                                "        except Exception as e:",
                                "            print(e)",
                                "            return cfnresponse.send(event, context, cfnresponse.FAILED, {})",
                                "    else:",
                                "        return cfnresponse.send(event, context, cfnresponse.SUCCESS, {})"
                            ]
                        ]
                    }
                },
                "Handler": "index.handler",
                "Role": {
                    "Ref": "RoleARN"
                },
                "Runtime": "python2.7",
                "Timeout": 30
            },
            "Type": "AWS::Lambda::Function"
        },
        "InvokeAddUser": {
            "Type": "Custom::LambdaCall",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "AddUserResourcesFunction",
                        "Arn"
                    ]
                },
                "RoleARN": {
                    "Ref": "RoleARN"
                },
                "USERPOOLID": {
                    "Ref": "USERPOOLID"
                },
                "USERPOOLCLIENTID": {
                    "Ref": "USERPOOLCLIENTID"
                },
                "IdentityPoolId": {
                    "Ref": "IdentityPoolId"
                },
                "AppUsername": {
                    "Ref": "Username"
                },
                "AppPassword": {
                    "Ref": "Password"
                },
                "Region": {
                    "Ref": "AWS::Region"
                }
            }
        }
    },
    "Parameters": {
        "RoleARN": {
            "Description": "CopyDataRole ARN",
            "Type": "String"
        },
        "DestinationResourceBucket": {
            "Description": "Bucket for static website hosting for destination_bucket",
            "Type": "String"
        },
		"RawBucket": {
            "Description": "Bucket for static website hosting for RawBucket",
            "Type": "String"
        },
        "DataCleaningApplication": {
            "Description": "Authernticated role ARN for Glue Execution  :",
            "Type": "String"
        },
        "DataAggregationApplication": {
            "Description": "Authernticated role ARN for Glue Execution  :",
            "Type": "String"
        },
        "DataCleaningInputStream": {
            "Description": "Enter name For Kinesis Firehose 1 :",
            "Type": "String"
        },
        "DataCleaningOutputStream": {
            "Description": "Enter name For Kinesis Firehose 2 :",
            "Type": "String"
        },
        "DataAggregationOutputStream1": {
            "Description": "Enter name For Kinesis Firehose 3  :",
            "Type": "String"
        },
        "DataAggregationOutputStream2": {
            "Description": "Enter name For Kinesis Firehose 4  :",
            "Type": "String"
        },
        "UserPoolName": {
            "Type": "String"
        },
        "UserPoolARN": {
            "Type": "String"
        },
        "USERPOOLID": {
            "Type": "String"
        },
        "USERPOOLCLIENTID": {
            "Type": "String"
        },
        "IdentityPoolId": {
            "Type": "String"
        },
        "UserPoolProviderName": {
            "Type": "String"
        },
        "Username": {
            "Type": "String"
        },
        "Password": {
            "Type": "String"
        },
        "ENDPOINTURL": {
            "Type": "String"
        },
        "RawCrawler": {
            "Type": "String"
        },
        "TransformedCrawler": {
            "Type": "String"
        },
        "PublishedCrawler": {
            "Type": "String"
        },
        "RedshiftCrawler": {
            "Type": "String"
        },
        "RawToTransformedJob": {
            "Type": "String"
        },
        "TransformedToPublishedJob": {
            "Type": "String"
        },
        "TransformedToRedshiftJob": {
            "Type": "String"
        },
        "RedshiftAnalyticsQueriesJob": {
            "Type": "String"
        },
        "RedshiftToTransformedJob": {
            "Type": "String"
        },
        "RedshiftSpectrumCreateExternalSchemaJob": {
            "Type": "String"
        },
        "ConnectionURL": {
            "Type": "String"
        },
        "RedshiftUsername": {
            "Type": "String"
        },
        "RedshiftPassword": {
            "Type": "String"
        },
        "KibanaURL": {
            "Type": "String"
        },
        "StreamMetaDataURL": {
            "Type": "String"
        },
        "GlueEndPOint": {
            "Type": "String"
        }
    }
}