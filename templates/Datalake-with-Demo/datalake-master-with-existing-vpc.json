{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Transform": "AWS::Serverless-2016-10-31",
	"Description": "Data Lake Foundation is a QuickStart that provides a Data Lake architecture, Redshift cluster, Elasticsearch domain, Data Lake walk-through wizard running on AWS EC2 instance, in the same VPC through Cloudformation templates that provision and configure the required resources, including related QuickStarts. This template provisions all of the resources that are specific to the Quick Start.  Leveraged Quick Starts (VPC, LinuxBastion), if needed, can be provisioned by using the data-lake-foundation-master template. **WARNING** You will be billed for the AWS resources used if you create a stack from this template.(qs-1nlkhq1o3)",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
					"Label": {
						"default": "Network Configuration"
					},
					"Parameters": [
						"AvailabilityZones",
						"VPCID",
						"VPCCIDR",
						"PrivateSubnet1ID",
						"PrivateSubnet2ID",
						"PublicSubnet1ID",
						"PublicSubnet2ID",
						"NAT1ElasticIP",
						"NAT2ElasticIP"
					]
				},
				{
					"Label": {
						"default": "Elasticsearch Configuration"
					},
					"Parameters": [
						"RemoteAccessCIDR",
						"ElasticsearchNodeType",
						"ElasticsearchNodeCount"
					]
				},
				{
					"Label": {
						"default": "Redshift Configuration"
					},
					"Parameters": [
						"RedshiftUsername",
						"RedshiftPassword",
						"RedshiftNumberOfNodes",
						"RedshiftNodeType"
					]
				},
				{
					"Label": {
						"default": "AWS Quick Start Configuration"
					},
					"Parameters": [
						"QSS3BucketName",
						"QSS3KeyPrefix",
						"KeyPairName"
					]
				}
			],
			"ParameterLabels": {
				"AvailabilityZones": {
					"default": "Availability Zones"
				},
				"KeyPairName": {
					"default": "Key Pair Name"
				},
				"RemoteAccessCIDR": {
					"default": "Remote Access CIDR"
				},
				"ElasticsearchNodeType": {
					"default": "Elasticsearch Node Type"
				},
				"ElasticsearchNodeCount": {
					"default": "Elasticsearch Node Count"
				},
				"WizardInstanceType": {
					"default": "Wizard Instance Type"
				},
				"WizardUserName": {
					"default": "Wizard User Name"
				},
				"WizardPassword": {
					"default": "Wizard Password"
				},
				"EnableRedshift": {
					"default": "Enable Redshift"
				},
				"RedshiftUsername": {
					"default": "Redshift User Name"
				},
				"RedshiftPassword": {
					"default": "Redshift Password"
				},
				"RedshiftNumberOfNodes": {
					"default": "Redshift Number of Nodes"
				},
				"RedshiftNodeType": {
					"default": "Redshift Node Type"
				},
				"RedshiftDatabasePort": {
					"default": "Redshift Database Port"
				},
				"QSS3BucketName": {
					"default": "Quick Start S3 Bucket Name"
				},
				"QSS3KeyPrefix": {
					"default": "Quick Start S3 Key Prefix"
				},
				"DatasetS3BucketName": {
					"default": "Dataset S3 Bucket Name"
				},
				"DatasetS3KeyPrefix": {
					"default": "Dataset S3 Key Prefix"
				},
				"PrivateSubnet1ID": {
					"default": "Existing VPC Private Subnet 1 ID"
				},
				"PrivateSubnet2ID": {
					"default": "Existing VPC Private Subnet 2 ID"
				},
				"PublicSubnet1ID": {
					"default": "Existing VPC Public Subnet 1 ID"
				},
				"PublicSubnet2ID": {
					"default": "Existing VPC Public Subnet 2 ID"
				},
				"NAT1ElasticIP": {
					"default": "NAT 1 IP address"
				},
				"NAT2ElasticIP": {
					"default": "NAT 2 IP address"
				},
				"VPCID": {
					"default": "Existing VPC ID"
				},
				"VPCCIDR": {
					"default": "Existing VPC CIDR"
				},
				"KinesisDataStreamName": {
					"default": "Kinesis Data Stream Name"
				},
				"KinesisDataStreamS3Prefix": {
					"default": "Kinesis Data Stream S3 Prefix"
				}
			}
		}
	},
	"Conditions": {
		"RedshiftPubliclyAccessible": {
			"Fn::Equals": [{
					"Ref": "PubliclyAccessible"
				},
				"true"
			]
		}
	},
	"Parameters": {
		"AvailabilityZones": {
			"Description": "The list of Availability Zones to use for the subnets in the VPC. You must specify two Availability Zones. By default, the Quick Start preserves the logical order you specify.",
			"Type": "List<AWS::EC2::AvailabilityZone::Name>"
		},
		"DatasetS3BucketName": {
			"AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
			"ConstraintDescription": "Dataset bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
			"Default": "yash-quickstart-datalake",
			"Description": "S3 bucket where the sample dataset is installed. The bucket name can include numbers, lowercase letters, uppercase letters, and hyphens, but should not start or end with a hyphen. Use this parameter to specify the S3 bucket name that you would like the Quick Start to to load, if you decide to use a different dataset, or if you decide to customize or extend the Quick Start dataset. (For more information, see Using Your Own Dataset.) Keep the default setting to use the sample dataset included with the Quick Start.",
			"Type": "String"
		},
		"DatasetS3KeyPrefix": {
			"AllowedPattern": "^[0-9a-zA-Z-]+(/[0-9a-zA-Z-]+)*$",
			"ConstraintDescription": "Dataset key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with forward slash (/) because they are automatically appended.",
			"Default": "datasets/data/v3",
			"Description": "S3 key prefix where the sample dataset is installed. This prefix can include numbers, lowercase letters, uppercase letters, hyphens, and forward slashes, but should not start with a forward slash, which is automatically added. Use this parameter to specify the location for the dataset you would like the Quick Start to load, if you decide to use a different dataset, or if you decide to customize or extend the Quick Start dataset. (For more information, see Using Your Own Dataset.) Keep the default setting to use the sample dataset included with the Quick Start.",
			"Type": "String"
		},
		"ElasticsearchNodeCount": {
			"Default": "1",
			"Description": "The number of nodes in the Elasticsearch cluster. For guidance, see the Amazon ES documentation.",
			"Type": "Number"
		},
		"ElasticsearchNodeType": {
			"AllowedValues": [
				"t2.small.elasticsearch",
				"m4.large.elasticsearch",
				"m4.xlarge.elasticsearch",
				"c4.large.elasticsearch",
				"c4.xlarge.elasticsearch",
				"r4.large.elasticsearch",
				"r4.xlarge.elasticsearch"
			],
			"ConstraintDescription": "must be a valid Elasticsearch node type.",
			"Default": "t2.small.elasticsearch",
			"Description": "EC2 instance type for the Elasticsearch cluster.",
			"Type": "String"
		},
		"KeyPairName": {
			"Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Default": "DataLakeFoundationYash"
		},
		"NAT1ElasticIP": {
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])",
			"Description": "Elastic IP address for the first NAT gateway instance that will be allowed access to Amazon ES.",
			"Type": "String"
		},
		"NAT2ElasticIP": {
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])",
			"Description": "Elastic IP address for the second NAT gateway instance that will be allowed access to Amazon ES.",
			"Type": "String"
		},
		"PrivateSubnet1ID": {
			"Description": "ID of the private subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"PrivateSubnet2ID": {
			"Description": "ID of the private subnet 2 in Availability Zone 2 (e.g., subnet-a0246dcd)",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"PublicSubnet1ID": {
			"Description": "ID of the public subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"PublicSubnet2ID": {
			"Description": "ID of the public subnet 2 in Availability Zone 2 (e.g., subnet-a0246dcd)",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"QSS3BucketName": {
			"AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
			"ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
			"Default": "yash-quickstart-datalake",
			"Description": "S3 bucket where the Quick Start templates and scripts are installed. Use this parameter to specify the S3 bucket name youâ€™ve created for your copy of Quick Start assets, if you decide to customize or extend the Quick Start for your own use. The bucket name can include numbers, lowercase letters, uppercase letters, and hyphens, but should not start or end with a hyphen.",
			"Type": "String"
		},
		"QSS3KeyPrefix": {
			"AllowedPattern": "^[0-9a-zA-Z-/]*$",
			"ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with forward slash (/) because they are automatically appended.",
			"Default": "SourceTemplates",
			"Description": "S3 key prefix used to simulate a folder for your copy of Quick Start assets, if you decide to customize or extend the Quick Start for your own use. This prefix can include numbers, lowercase letters, uppercase letters, hyphens, and forward slashes.",
			"Type": "String"
		},
		"RedshiftNodeType": {
			"AllowedValues": [
				"dw1.xlarge",
				"dw1.8xlarge",
				"dw2.large",
				"dw2.8xlarge",
				"dc1.large",
				"dc1.8xlarge",
				"ds1.xlarge",
				"ds1.8xlarge",
				"ds2.xlarge",
				"ds2.8xlarge"
			],
			"ConstraintDescription": "must be a valid Redshift node type.",
			"Default": "dc1.large",
			"Description": "Instance type for the nodes in the Amazon Redshift cluster.",
			"Type": "String"
		},
		"RedshiftNumberOfNodes": {
			"Default": "1",
			"Description": "The number of nodes in the Amazon Redshift cluster. If you specify a number thatâ€™s larger than 1, the Quick Start will launch a multi-node cluster.",
			"Type": "Number"
		},
		"RedshiftPassword": {
			"AllowedPattern": "^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])[A-Za-z0-9!#$%&()*+,.:;<=>?\\[\\]^_`{|}~-]*$",
			"ConstraintDescription": "Password must contain 8 to 64 printable ASCII characters excluding: /, \", \\', \\ and @. It must contain 1 uppercase letter, 1 lowercase letter, and 1 number.",
			"Description": "The password that is associated with the master user account for the Amazon Redshift cluster. The password must contain 8 to 64 printable ASCII characters, excluding: /, \", \\', \\ and @. It must contain one uppercase letter, one lowercase letter, and one number.",
			"MaxLength": "64",
			"MinLength": "8",
			"NoEcho": "true",
			"Type": "String"
		},
		"RedshiftUsername": {
			"AllowedPattern": "^[a-z][a-z0-9_]*$",
			"ConstraintDescription": "User name parameter must be lowercase, begin with a letter, contain only alphanumeric characters or underscores, and be less than 128 characters.",
			"Default": "datalake",
			"Description": "The user name that is associated with the master user account for the Amazon Redshift cluster. The user name must contain fewer than 128 alphanumeric characters or underscores, and must be lowercase and begin with a letter. ",
			"MaxLength": "128",
			"MinLength": "1",
			"Type": "String"
		},
		"RemoteAccessCIDR": {
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
			"ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
			"Description": "The CIDR IP range that is permitted to SSH into the bastion host instance and access Amazon ES. We recommend that you set this value to a trusted IP range. For example, you might want to grant only your corporate network access to the software. You can use http://checkip.amazonaws.com/  to check your IP address. This parameter must be in the form x.x.x.x/x (e.g., 96.127.8.12/32, YOUR_IP/32).",
			"Type": "String",
			"Default": "0.0.0.0/0"
		},
		"VPCCIDR": {
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
			"ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
			"Description": "CIDR block for the VPC.",
			"Type": "String"
		},
		"VPCID": {
			"Description": "ID of your existing VPC (e.g., vpc-0343606e).",
			"Type": "AWS::EC2::VPC::Id"
		},
		"PubliclyAccessible": {
			"AllowedValues": [
				"true",
				"false"
			],
			"Default": "true",
			"Description": "Indicates whether the redshift cluster can be accessed from a public network.",
			"Type": "String"
		},
		"CognitoUserName": {
			"Description": "Enter cognito user name",
			"Type": "String",
			"Default": "yashinnovation"
		},
		"CognitoPassword": {
			"Description": "Enter cognito password",
			"Type": "String",
			"NoEcho": "true"
		}
	},
	"Resources": {
		"LambdaRole": {
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [{
						"Action": [
							"sts:AssumeRole"
						],
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"lambda.amazonaws.com"
							]
						}
					}],
					"Version": "2012-10-17"
				},
				"Policies": [{
						"PolicyDocument": {
							"Statement": [{
								"Action": [
									"logs:CreateLogGroup",
									"logs:CreateLogStream",
									"logs:PutLogEvents"
								],
								"Effect": "Allow",
								"Resource": "arn:aws:logs:*:*:*"
							}],
							"Version": "2012-10-17"
						},
						"PolicyName": "LambdaLogging"
					},
					{
						"PolicyDocument": {
							"Statement": [{
								"Action": [
									"s3:GetObject"
								],
								"Effect": "Allow",
								"Resource": [{
										"Fn::Sub": [
											"arn:aws:s3:::${RawBucketName}/*",
											{
												"RawBucketName": {
													"Fn::Join": [
														"-", [
															"datalake",
															"raw",
															{
																"Ref": "AWS::AccountId"
															},
															{
																"Ref": "AWS::Region"
															}
														]
													]
												}
											}
										]
									},
									{
										"Fn::Sub": [
											"arn:aws:s3:::${TransformedDatasetsBucket}/*",
											{
												"TransformedDatasetsBucket": {
													"Fn::Join": [
														"-", [
															"datalake",
															"transformed",
															"datasets",
															{
																"Ref": "AWS::AccountId"
															},
															{
																"Ref": "AWS::Region"
															}
														]
													]
												}
											}
										]
									},
									{
										"Fn::Sub": [
											"arn:aws:s3:::${EnrichedDataBucket}/*",
											{
												"EnrichedDataBucket": {
													"Fn::Join": [
														"-", [
															"datalake",
															"published",
															"data",
															{
																"Ref": "AWS::AccountId"
															},
															{
																"Ref": "AWS::Region"
															}
														]
													]
												}
											}
										]
									}
								]
							}],
							"Version": "2012-10-17"
						},
						"PolicyName": "GetObjectsDatalake"
					}
				]
			},
			"Type": "AWS::IAM::Role"
		},
		"IndexCreationLambdaRole": {
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [{
						"Action": [
							"sts:AssumeRole"
						],
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"lambda.amazonaws.com"
							]
						}
					}],
					"Version": "2012-10-17"
				},
				"Path": "/",
				"Policies": [{
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Action": [
								"es:*"
							],
							"Effect": "Allow",
							"Resource": "*"
						}]
					},
					"PolicyName": "ESFullAccess"
				}]
			},
			"Type": "AWS::IAM::Role"
		},
		"IAMRolesStack": {
			"Properties": {
				"Parameters": {
					"TransformedDatasets": {
						"Ref": "TransformedDatasets"
					}
				},
				"TemplateURL": {
					"Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/iam.json"
				}
			},
			"Type": "AWS::CloudFormation::Stack"
		},
		"ElasticsearchStack": {
			"DependsOn": [],
			"Properties": {
				"Parameters": {
					"ElasticsearchAccessIP": {
						"Ref": "RemoteAccessCIDR"
					},
					"NAT1ElasticIP": {
						"Ref": "NAT1ElasticIP"
					},
					"NAT2ElasticIP": {
						"Ref": "NAT2ElasticIP"
					},
					"NodeCount": {
						"Ref": "ElasticsearchNodeCount"
					},
					"NodeType": {
						"Ref": "ElasticsearchNodeType"
					}
				},
				"TemplateURL": {
					"Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/ElasticSearch.json"
				}
			},
			"Type": "AWS::CloudFormation::Stack"
		},
		"metadataFunction": {
			"Type": "AWS::Serverless::Function",
			"Properties": {
				"Handler": "lambda_function.lambda_handler",
				"Runtime": "python2.7",
				"CodeUri": {
					"Bucket": {
						"Ref": "QSS3BucketName"
					},
					"Key": {
						"Fn::Sub": [
							"${QSS3KeyPrefix}/metadataESFunction.zip",
							{
								"QSS3KeyPrefix": {
									"Ref": "QSS3KeyPrefix"
								}
							}
						]
					}
				},
				"Description": "A starter AWS Lambda function.",
				"MemorySize": 128,
				"Timeout": 3,
				"Role": {
					"Fn::GetAtt": [
						"LambdaRole",
						"Arn"
					]
				},
				"Environment": {
					"Variables": {
						"ES_endpoint": {
							"Fn::GetAtt": [
								"ElasticsearchStack",
								"Outputs.ElasticsearchEndpoint"
							]
						}
					}
				},
				"Events": {
					"RawBucketEvent": {
						"Type": "S3",
						"Properties": {
							"Bucket": {
								"Ref": "RawBucket"
							},
							"Events": [
								"s3:ObjectCreated:*"
							]
						}
					},
					"TransformedDatasetsEvent": {
						"Type": "S3",
						"Properties": {
							"Bucket": {
								"Ref": "TransformedDatasets"
							},
							"Events": [
								"s3:ObjectCreated:*"
							]
						}
					},
					"PublishedDataEvent": {
						"Type": "S3",
						"Properties": {
							"Bucket": {
								"Ref": "PublishedData"
							},
							"Events": [
								"s3:ObjectCreated:*"
							]
						}
					}
				}
			}
		},
		"AddUserESIndexFunction": {
			"DependsOn": "ElasticsearchStack",
			"Properties": {
				"Environment": {
					"Variables": {
						"esEndPoint": {
							"Fn::GetAtt": [
								"ElasticsearchStack",
								"Outputs.ElasticsearchEndpoint"
							]
						},
						"region": {
							"Ref": "AWS::Region"
						}
					}
				},
				"Code": {
					"S3Bucket": {
						"Ref": "QSS3BucketName"
					},
					"S3Key": {
						"Fn::Sub": [
							"${QSS3KeyPrefix}/CreateESIndex.zip",
							{
								"QSS3KeyPrefix": {
									"Ref": "QSS3KeyPrefix"
								}
							}
						]
					}
				},
				"Handler": "lambda_function.lambda_handler",
				"Role": {
					"Fn::GetAtt": [
						"IndexCreationLambdaRole",
						"Arn"
					]
				},
				"Runtime": "python2.7",
				"Timeout": 30
			},
			"Type": "AWS::Lambda::Function"
		},
		"InvokeAddESIndex": {
			"Type": "Custom::LambdaCall",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"AddUserESIndexFunction",
						"Arn"
					]
				}
			}
		},
		"RawBucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": {
					"Fn::Join": [
						"-", [
							"datalake",
							"raw",
							{
								"Ref": "AWS::AccountId"
							},
							{
								"Ref": "AWS::Region"
							}
						]
					]
				}
			}
		},
		"TransformedDatasets": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": {
					"Fn::Join": [
						"-", [
							"datalake",
							"transformed",
							"datasets",
							{
								"Ref": "AWS::AccountId"
							},
							{
								"Ref": "AWS::Region"
							}
						]
					]
				}
			}
		},
		"PublishedData": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": {
					"Fn::Join": [
						"-", [
							"datalake",
							"published",
							"data",
							{
								"Ref": "AWS::AccountId"
							},
							{
								"Ref": "AWS::Region"
							}
						]
					]
				}
			}
		},
		"RegionalLambdaBucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": {
					"Fn::Join": [
						"-", [
							"regional",
							"lambda",
							"bucket",
							{
								"Ref": "AWS::AccountId"
							},
							{
								"Ref": "AWS::Region"
							}
						]
					]
				}
			}
		},
		"LogsBucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": {
					"Fn::Join": [
						"-", [
							"datalake",
							"logs",
							{
								"Ref": "AWS::AccountId"
							},
							{
								"Ref": "AWS::Region"
							}
						]
					]
				}
			}
		},
		"WebsiteHostingbucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": {
					"Fn::Join": [
						"-", [
							"datalake",
							"serverless",
							"websitehosting",
							{
								"Ref": "AWS::AccountId"
							},
							{
								"Ref": "AWS::Region"
							}
						]
					]
				},
				"WebsiteConfiguration": {
					"IndexDocument": "login.html",
					"ErrorDocument": "error.html"
				}
			}
		},
		"BastionStack": {
			"Properties": {
				"Parameters": {
					"EnableTCPForwarding": "true",
					"KeyPairName": {
						"Ref": "KeyPairName"
					},
					"RawBucketRef": {
						"Ref": "RawBucket"
					},
					"PublicSubnet1ID": {
						"Ref": "PublicSubnet1ID"
					},
					"PublicSubnet2ID": {
						"Ref": "PublicSubnet2ID"
					},
					"QSS3BucketName": {
						"Ref": "QSS3BucketName"
					},
					"QSS3KeyPrefix": {
						"Ref": "QSS3KeyPrefix"
					},
					"RemoteAccessCIDR": {
						"Ref": "RemoteAccessCIDR"
					},
					"VPCID": {
						"Ref": "VPCID"
					},
					"DatasetS3BucketName": {
						"Ref": "DatasetS3BucketName"
					},
					"DatasetS3KeyPrefix": {
						"Ref": "DatasetS3KeyPrefix"
					},
					"WebsiteHostingbucket": {
						"Ref": "WebsiteHostingbucket"
					}
				},
				"TemplateURL": {
					"Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/LinuxBastionWithCopyData.json"
				}
			},
			"Type": "AWS::CloudFormation::Stack"
		},
		"RedshiftStack": {
			"DependsOn": [],
			"Properties": {
				"Parameters": {
					"NodeType": {
						"Ref": "RedshiftNodeType"
					},
					"NumberOfNodes": {
						"Ref": "RedshiftNumberOfNodes"
					},
					"PubliclyAccessible": {
						"Fn::If": [
							"RedshiftPubliclyAccessible",
							"true",
							"false"
						]
					},
					"RedshiftRoleARN": {
						"Fn::GetAtt": [
							"IAMRolesStack",
							"Outputs.RedshiftRoleARN"
						]
					},
					"RedshiftInboundCIDR": {
						"Ref": "VPCCIDR"
					},
					"RedshiftPassword": {
						"Ref": "RedshiftPassword"
					},
					"RedshiftUsername": {
						"Ref": "RedshiftUsername"
					},
					"SubnetId1": {
						"Fn::If": [
							"RedshiftPubliclyAccessible",
							{
								"Ref": "PublicSubnet1ID"
							},
							{
								"Ref": "PrivateSubnet1ID"
							}
						]
					},
					"SubnetId2": {
						"Fn::If": [
							"RedshiftPubliclyAccessible",
							{
								"Ref": "PublicSubnet2ID"
							},
							{
								"Ref": "PrivateSubnet2ID"
							}
						]
					},
					"VpcId": {
						"Ref": "VPCID"
					}
				},
				"TemplateURL": {
					"Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/redshift.json"
				}
			},
			"Type": "AWS::CloudFormation::Stack"
		},
		"CognitoStack": {
			"Type": "AWS::CloudFormation::Stack",
			"Properties": {
				"TemplateURL": {
					"Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/cognito.json"
				}
			}
		},
		"GlueStack": {
			"Properties": {
				"Parameters": {
					"AWSGlueCuratedDatasetsCrawlerRoleName": {
						"Fn::GetAtt": [
							"IAMRolesStack",
							"Outputs.GlueRoleName"
						]
					},
					"AWSGlueJobRoleName": {
						"Fn::GetAtt": [
							"IAMRolesStack",
							"Outputs.GlueRoleName"
						]
					},
					"BucketRaw": {
						"Ref": "RawBucket"
					},
					"BucketTransformed": {
						"Ref": "TransformedDatasets"
					},
					"BucketPublished": {
						"Ref": "PublishedData"
					},
					"LogsBucket": {
						"Ref": "LogsBucket"
					},
					"RedshiftPassword": {
						"Ref": "RedshiftPassword"
					},
					"RedshiftUsername": {
						"Ref": "RedshiftUsername"
					},
					"ConnectionURL": {
						"Fn::GetAtt": [
							"RedshiftStack",
							"Outputs.ConnectionURL"
						]
					},
					"HostURL": {
						"Fn::GetAtt": [
							"RedshiftStack",
							"Outputs.HostURL"
						]
					},
					"RedshiftRoleARN": {
						"Fn::GetAtt": [
							"IAMRolesStack",
							"Outputs.RedshiftRoleARN"
						]
					},
					"QSS3BucketName": {
						"Ref": "QSS3BucketName"
					},
					"QSS3KeyPrefix": {
						"Ref": "QSS3KeyPrefix"
					}
				},
				"TemplateURL": {
					"Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/glue.json"
				}
			},
			"Type": "AWS::CloudFormation::Stack"
		},
		"kinsesisStack": {
			"Properties": {
				"Parameters": {
					"RawFirehoseBucket": {
						"Ref": "RawBucket"
					},
					"TransformedFirehoseBucket": {
						"Ref": "TransformedDatasets"
					},
					"RedshiftConnectionURL": {
						"Fn::GetAtt": [
							"RedshiftStack",
							"Outputs.ConnectionURL"
						]
					},
					"RedshiftPassword": {
						"Ref": "RedshiftPassword"
					},
					"RedshiftUsername": {
						"Ref": "RedshiftUsername"
					},
					"ElasticSearchDomianARN": {
						"Fn::GetAtt": [
							"ElasticsearchStack",
							"Outputs.ElasticsearchDomainARN"
						]
					},
					"KinesisReferenceDataSourceRoleARN": {
						"Fn::GetAtt": [
							"IAMRolesStack",
							"Outputs.KinesisReferenceDataSourceRoleARN"
						]
					},
					"KinesisAnalyticsApplicationRoleARN": {
						"Fn::GetAtt": [
							"IAMRolesStack",
							"Outputs.KinesisAnalyticsApplicationRoleARN"
						]
					},
					"FirehoseDeliveryRoleARN": {
						"Fn::GetAtt": [
							"IAMRolesStack",
							"Outputs.FirehoseDeliveryRoleARN"
						]
					}
				},
				"TemplateURL": {
					"Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/kinesis.json"
				}
			},
			"Type": "AWS::CloudFormation::Stack"
		},
		"APIHandler": {
			"Type": "AWS::Serverless::Function",
			"DependsOn": "CognitoStack",
			"Properties": {
				"Tags": {
					"aws-chalice": "version=1.0.4:stage=dev:app=AwsServerlessDataLake"
				},
				"MemorySize": 3008,
				"Environment": {
					"Variables": {
						"destination_bucket_name": {
							"Ref": "WebsiteHostingbucket"
						},
						"user_pool_name": {
							"Fn::GetAtt": [
								"CognitoStack",
								"Outputs.UserPoolName"
							]
						},
						"properties_file_name": "appconfig.ini",
						"cognito_pool_arn": {
							"Fn::GetAtt": [
								"CognitoStack",
								"Outputs.UserPoolARN"
							]
						},
						"crawler_on_raw_bucket": {
							"Fn::GetAtt": [
								"GlueStack",
								"Outputs.RawCrawler"
							]
						},
						"crawler_on_transfromed_bucket": {
							"Fn::GetAtt": [
								"GlueStack",
								"Outputs.TransformedCrawler"
							]
						},
						"crawler_on_published_bucket": {
							"Fn::GetAtt": [
								"GlueStack",
								"Outputs.PublishedCrawler"
							]
						},
						"crawler_on_redshift_data": {
							"Fn::GetAtt": [
								"GlueStack",
								"Outputs.RedshiftCrawler"
							]
						},
						"raw_to_transformed_job": {
							"Fn::GetAtt": [
								"GlueStack",
								"Outputs.RawToTransformedJob"
							]
						},
						"transformed_to_published_job": {
							"Fn::GetAtt": [
								"GlueStack",
								"Outputs.TransformedToPublishedJob"
							]
						},
						"transformed_to_redshift_job": {
							"Fn::GetAtt": [
								"GlueStack",
								"Outputs.TransformedToRedshiftJob"
							]
						},
						"run_redshift_analytics_queries_job": {
							"Fn::GetAtt": [
								"GlueStack",
								"Outputs.RedshiftAnalyticsQueriesJob"
							]
						},
						"redshift_to_transformed_job": {
							"Fn::GetAtt": [
								"GlueStack",
								"Outputs.RedshiftToTransformedJob"
							]
						},
						"redshift_spectrum_create_external_schema_job": {
							"Fn::GetAtt": [
								"GlueStack",
								"Outputs.RedshiftSpectrumCreateExternalSchemaJob"
							]
						},
						"ConnectionURL": {
							"Fn::GetAtt": [
								"GlueStack",
								"Outputs.ConnectionURL"
							]
						},
						"region": {
							"Ref": "AWS::Region"
						},
						"glue_endpoint": {
							"Fn::Join": [
								"", [
									"https://glue.",
									{
										"Ref": "AWS::Region"
									},
									".amazonaws.com"
								]
							]
						},
						"raw_bucket_name": {
							"Ref": "RawBucket"
						}
					}
				},
				"Handler": "app.app",
				"Role": {
					"Fn::GetAtt": [
						"IAMRolesStack",
						"Outputs.kinesisLambdaS3RoleARN"
					]
				},
				"Timeout": 300,
				"CodeUri": {
					"Bucket": {
						"Ref": "QSS3BucketName"
					},
					"Key": {
						"Fn::Sub": [
							"${QSS3KeyPrefix}/lambdaFunctions.zip",
							{
								"QSS3KeyPrefix": {
									"Ref": "QSS3KeyPrefix"
								}
							}
						]
					}
				},
				"Runtime": "python2.7",
				"Events": {
              "RawDatajobgetefde": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/rawtransformetl",
                            "RestApiId": {
                                "Ref": "RestAPI"
                            },
                            "Method": "get"
                        }
                    },
                    "createsignintokenpostd81a": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/getSignInToken",
                            "RestApiId": {
                                "Ref": "RestAPI"
                            },
                            "Method": "post"
                        }
                    },
                    "authenticatedget2220": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/getProperties",
                            "RestApiId": {
                                "Ref": "RestAPI"
                            },
                            "Method": "get"
                        }
                    },
                    "runredshiftcommandsgetb553": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/redshift",
                            "RestApiId": {
                                "Ref": "RestAPI"
                            },
                            "Method": "get"
                        }
                    },
                    "readPropertiesgetf3de": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/prop",
                            "RestApiId": {
                                "Ref": "RestAPI"
                            },
                            "Method": "get"
                        }
                    },
                    "callingcreatecrawlerget3bc6": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/crawler",
                            "RestApiId": {
                                "Ref": "RestAPI"
                            },
                            "Method": "get"
                        }
                    },
                    "crawlerontransformedget3c7c": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/transformcrawler",
                            "RestApiId": {
                                "Ref": "RestAPI"
                            },
                            "Method": "get"
                        }
                    },
                    "runredshiftjobsgetdc02": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/transformedredshift",
                            "RestApiId": {
                                "Ref": "RestAPI"
                            },
                            "Method": "get"
                        }
                    },
                    "runredshifttotransformcopyanalyticsget5dd0": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/redshifttotransformcopy",
                            "RestApiId": {
                                "Ref": "RestAPI"
                            },
                            "Method": "get"
                        }
                    },
                    "runtransformTopublishJobget970b": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/run_transform_to_publish_job",
                            "RestApiId": {
                                "Ref": "RestAPI"
                            },
                            "Method": "get"
                        }
                    },
                    "createandruncrawlerredshiftDBgeta211": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/runredshiftcrawler",
                            "RestApiId": {
                                "Ref": "RestAPI"
                            },
                            "Method": "get"
                        }
                    },
                    "createrunpublishcrawlergetb821": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/create_run_publish_crawler",
                            "RestApiId": {
                                "Ref": "RestAPI"
                            },
                            "Method": "get"
                        }
                    },
                    "runcrawlerget9092": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/run_crawler",
                            "RestApiId": {
                                "Ref": "RestAPI"
                            },
                            "Method": "get"
                        }
                    },
                    "runredshiftanalyticsqueriesgetbca3": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/redshiftanalyticsqueries",
                            "RestApiId": {
                                "Ref": "RestAPI"
                            },
                            "Method": "get"
                        }
                    },
                    "copyincrementaldatatorawbucketgetfa32": {
                        "Type": "Api",
                        "Properties": {
                            "Path": "/add-incremental_data",
                            "RestApiId": {
                                "Ref": "RestAPI"
                            },
                            "Method": "get"
                        }
                    }
				}
			}
		},
		"RestAPI": {
			"Type": "AWS::Serverless::Api",
			"DependsOn": "CognitoStack",
			"Properties": {
				"DefinitionBody": {
					"info": {
						"version": "1.0",
						"title": "AwsServerlessDataLake_2Jan2018"
					},
					"paths": {
						"/getProperties": {
							"options": {
								"responses": {
									"200": {
										"headers": {
											"Access-Control-Allow-Origin": {
												"type": "string"
											},
											"Access-Control-Allow-Methods": {
												"type": "string"
											},
											"Access-Control-Allow-Headers": {
												"type": "string"
											}
										},
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"x-amazon-apigateway-integration": {
									"type": "mock",
									"passthroughBehavior": "when_no_match",
									"requestTemplates": {
										"application/json": "{\"statusCode\": 200}"
									},
									"responses": {
										"default": {
											"responseParameters": {
												"method.response.header.Access-Control-Allow-Origin": "'*'",
												"method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
												"method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
											},
											"statusCode": "200"
										}
									}
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							},
							"get": {
								"responses": {
									"200": {
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"security": [{
									"CognitoAuthorizer": []
								}],
								"x-amazon-apigateway-integration": {
									"contentHandling": "CONVERT_TO_TEXT",
									"responses": {
										"default": {
											"statusCode": "200"
										}
									},
									"uri": {
										"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
									},
									"httpMethod": "POST",
									"passthroughBehavior": "when_no_match",
									"type": "aws_proxy"
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							}
						},
						"/getSignInToken": {
							"post": {
								"responses": {
									"200": {
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"security": [{
									"CognitoAuthorizer": []
								}],
								"x-amazon-apigateway-integration": {
									"contentHandling": "CONVERT_TO_TEXT",
									"responses": {
										"default": {
											"statusCode": "200"
										}
									},
									"uri": {
										"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
									},
									"httpMethod": "POST",
									"passthroughBehavior": "when_no_match",
									"type": "aws_proxy"
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							},
							"options": {
								"responses": {
									"200": {
										"headers": {
											"Access-Control-Allow-Origin": {
												"type": "string"
											},
											"Access-Control-Allow-Methods": {
												"type": "string"
											},
											"Access-Control-Allow-Headers": {
												"type": "string"
											}
										},
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"x-amazon-apigateway-integration": {
									"type": "mock",
									"passthroughBehavior": "when_no_match",
									"requestTemplates": {
										"application/json": "{\"statusCode\": 200}"
									},
									"responses": {
										"default": {
											"responseParameters": {
												"method.response.header.Access-Control-Allow-Origin": "'*'",
												"method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
												"method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
											},
											"statusCode": "200"
										}
									}
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							}
						},
						"/crawler": {
							"options": {
								"responses": {
									"200": {
										"headers": {
											"Access-Control-Allow-Origin": {
												"type": "string"
											},
											"Access-Control-Allow-Methods": {
												"type": "string"
											},
											"Access-Control-Allow-Headers": {
												"type": "string"
											}
										},
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"x-amazon-apigateway-integration": {
									"type": "mock",
									"passthroughBehavior": "when_no_match",
									"requestTemplates": {
										"application/json": "{\"statusCode\": 200}"
									},
									"responses": {
										"default": {
											"responseParameters": {
												"method.response.header.Access-Control-Allow-Origin": "'*'",
												"method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
												"method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
											},
											"statusCode": "200"
										}
									}
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							},
							"get": {
								"responses": {
									"200": {
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"security": [{
									"CognitoAuthorizer": []
								}],
								"x-amazon-apigateway-integration": {
									"contentHandling": "CONVERT_TO_TEXT",
									"responses": {
										"default": {
											"statusCode": "200"
										}
									},
									"uri": {
										"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
									},
									"httpMethod": "POST",
									"passthroughBehavior": "when_no_match",
									"type": "aws_proxy"
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							}
						},
						"/rawtransformetl": {
							"options": {
								"responses": {
									"200": {
										"headers": {
											"Access-Control-Allow-Origin": {
												"type": "string"
											},
											"Access-Control-Allow-Methods": {
												"type": "string"
											},
											"Access-Control-Allow-Headers": {
												"type": "string"
											}
										},
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"x-amazon-apigateway-integration": {
									"type": "mock",
									"passthroughBehavior": "when_no_match",
									"requestTemplates": {
										"application/json": "{\"statusCode\": 200}"
									},
									"responses": {
										"default": {
											"responseParameters": {
												"method.response.header.Access-Control-Allow-Origin": "'*'",
												"method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
												"method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
											},
											"statusCode": "200"
										}
									}
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							},
							"get": {
								"responses": {
									"200": {
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"security": [{
									"CognitoAuthorizer": []
								}],
								"x-amazon-apigateway-integration": {
									"contentHandling": "CONVERT_TO_TEXT",
									"responses": {
										"default": {
											"statusCode": "200"
										}
									},
									"uri": {
										"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
									},
									"httpMethod": "POST",
									"passthroughBehavior": "when_no_match",
									"type": "aws_proxy"
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							}
						},
						"/prop": {
							"options": {
								"responses": {
									"200": {
										"headers": {
											"Access-Control-Allow-Origin": {
												"type": "string"
											},
											"Access-Control-Allow-Methods": {
												"type": "string"
											},
											"Access-Control-Allow-Headers": {
												"type": "string"
											}
										},
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"x-amazon-apigateway-integration": {
									"type": "mock",
									"passthroughBehavior": "when_no_match",
									"requestTemplates": {
										"application/json": "{\"statusCode\": 200}"
									},
									"responses": {
										"default": {
											"responseParameters": {
												"method.response.header.Access-Control-Allow-Origin": "'*'",
												"method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
												"method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
											},
											"statusCode": "200"
										}
									}
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							},
							"get": {
								"responses": {
									"200": {
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"security": [{
									"CognitoAuthorizer": []
								}],
								"x-amazon-apigateway-integration": {
									"contentHandling": "CONVERT_TO_TEXT",
									"responses": {
										"default": {
											"statusCode": "200"
										}
									},
									"uri": {
										"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
									},
									"httpMethod": "POST",
									"passthroughBehavior": "when_no_match",
									"type": "aws_proxy"
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							}
						},
						"/transformcrawler": {
							"options": {
								"responses": {
									"200": {
										"headers": {
											"Access-Control-Allow-Origin": {
												"type": "string"
											},
											"Access-Control-Allow-Methods": {
												"type": "string"
											},
											"Access-Control-Allow-Headers": {
												"type": "string"
											}
										},
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"x-amazon-apigateway-integration": {
									"type": "mock",
									"passthroughBehavior": "when_no_match",
									"requestTemplates": {
										"application/json": "{\"statusCode\": 200}"
									},
									"responses": {
										"default": {
											"responseParameters": {
												"method.response.header.Access-Control-Allow-Origin": "'*'",
												"method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
												"method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
											},
											"statusCode": "200"
										}
									}
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							},
							"get": {
								"responses": {
									"200": {
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"security": [{
									"CognitoAuthorizer": []
								}],
								"x-amazon-apigateway-integration": {
									"contentHandling": "CONVERT_TO_TEXT",
									"responses": {
										"default": {
											"statusCode": "200"
										}
									},
									"uri": {
										"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
									},
									"httpMethod": "POST",
									"passthroughBehavior": "when_no_match",
									"type": "aws_proxy"
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							}
						},
						"/redshift": {
							"options": {
								"responses": {
									"200": {
										"headers": {
											"Access-Control-Allow-Origin": {
												"type": "string"
											},
											"Access-Control-Allow-Methods": {
												"type": "string"
											},
											"Access-Control-Allow-Headers": {
												"type": "string"
											}
										},
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"x-amazon-apigateway-integration": {
									"type": "mock",
									"passthroughBehavior": "when_no_match",
									"requestTemplates": {
										"application/json": "{\"statusCode\": 200}"
									},
									"responses": {
										"default": {
											"responseParameters": {
												"method.response.header.Access-Control-Allow-Origin": "'*'",
												"method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
												"method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
											},
											"statusCode": "200"
										}
									}
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							},
							"get": {
								"responses": {
									"200": {
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"security": [{
									"CognitoAuthorizer": []
								}],
								"x-amazon-apigateway-integration": {
									"contentHandling": "CONVERT_TO_TEXT",
									"responses": {
										"default": {
											"statusCode": "200"
										}
									},
									"uri": {
										"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
									},
									"httpMethod": "POST",
									"passthroughBehavior": "when_no_match",
									"type": "aws_proxy"
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							}
						},
						"/transformedredshift": {
							"options": {
								"responses": {
									"200": {
										"headers": {
											"Access-Control-Allow-Origin": {
												"type": "string"
											},
											"Access-Control-Allow-Methods": {
												"type": "string"
											},
											"Access-Control-Allow-Headers": {
												"type": "string"
											}
										},
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"x-amazon-apigateway-integration": {
									"type": "mock",
									"passthroughBehavior": "when_no_match",
									"requestTemplates": {
										"application/json": "{\"statusCode\": 200}"
									},
									"responses": {
										"default": {
											"responseParameters": {
												"method.response.header.Access-Control-Allow-Origin": "'*'",
												"method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
												"method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
											},
											"statusCode": "200"
										}
									}
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							},
							"get": {
								"responses": {
									"200": {
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"security": [{
									"CognitoAuthorizer": []
								}],
								"x-amazon-apigateway-integration": {
									"contentHandling": "CONVERT_TO_TEXT",
									"responses": {
										"default": {
											"statusCode": "200"
										}
									},
									"uri": {
										"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
									},
									"httpMethod": "POST",
									"passthroughBehavior": "when_no_match",
									"type": "aws_proxy"
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							}
						},
						"/run_transform_to_publish_job": {
							"options": {
								"responses": {
									"200": {
										"headers": {
											"Access-Control-Allow-Origin": {
												"type": "string"
											},
											"Access-Control-Allow-Methods": {
												"type": "string"
											},
											"Access-Control-Allow-Headers": {
												"type": "string"
											}
										},
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"x-amazon-apigateway-integration": {
									"type": "mock",
									"passthroughBehavior": "when_no_match",
									"requestTemplates": {
										"application/json": "{\"statusCode\": 200}"
									},
									"responses": {
										"default": {
											"responseParameters": {
												"method.response.header.Access-Control-Allow-Origin": "'*'",
												"method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
												"method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
											},
											"statusCode": "200"
										}
									}
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							},
							"get": {
								"responses": {
									"200": {
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"security": [{
									"CognitoAuthorizer": []
								}],
								"x-amazon-apigateway-integration": {
									"contentHandling": "CONVERT_TO_TEXT",
									"responses": {
										"default": {
											"statusCode": "200"
										}
									},
									"uri": {
										"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
									},
									"httpMethod": "POST",
									"passthroughBehavior": "when_no_match",
									"type": "aws_proxy"
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							}
						},
						"/redshiftanalyticsqueries": {
							"options": {
								"responses": {
									"200": {
										"headers": {
											"Access-Control-Allow-Origin": {
												"type": "string"
											},
											"Access-Control-Allow-Methods": {
												"type": "string"
											},
											"Access-Control-Allow-Headers": {
												"type": "string"
											}
										},
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"x-amazon-apigateway-integration": {
									"type": "mock",
									"passthroughBehavior": "when_no_match",
									"requestTemplates": {
										"application/json": "{\"statusCode\": 200}"
									},
									"responses": {
										"default": {
											"responseParameters": {
												"method.response.header.Access-Control-Allow-Origin": "'*'",
												"method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
												"method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
											},
											"statusCode": "200"
										}
									}
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							},
							"get": {
								"responses": {
									"200": {
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"security": [{
									"CognitoAuthorizer": []
								}],
								"x-amazon-apigateway-integration": {
									"contentHandling": "CONVERT_TO_TEXT",
									"responses": {
										"default": {
											"statusCode": "200"
										}
									},
									"uri": {
										"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
									},
									"httpMethod": "POST",
									"passthroughBehavior": "when_no_match",
									"type": "aws_proxy"
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							}
						},
						"/redshifttotransformcopy": {
							"options": {
								"responses": {
									"200": {
										"headers": {
											"Access-Control-Allow-Origin": {
												"type": "string"
											},
											"Access-Control-Allow-Methods": {
												"type": "string"
											},
											"Access-Control-Allow-Headers": {
												"type": "string"
											}
										},
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"x-amazon-apigateway-integration": {
									"type": "mock",
									"passthroughBehavior": "when_no_match",
									"requestTemplates": {
										"application/json": "{\"statusCode\": 200}"
									},
									"responses": {
										"default": {
											"responseParameters": {
												"method.response.header.Access-Control-Allow-Origin": "'*'",
												"method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
												"method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
											},
											"statusCode": "200"
										}
									}
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							},
							"get": {
								"responses": {
									"200": {
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"security": [{
									"CognitoAuthorizer": []
								}],
								"x-amazon-apigateway-integration": {
									"contentHandling": "CONVERT_TO_TEXT",
									"responses": {
										"default": {
											"statusCode": "200"
										}
									},
									"uri": {
										"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
									},
									"httpMethod": "POST",
									"passthroughBehavior": "when_no_match",
									"type": "aws_proxy"
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							}
						},
						"/run_crawler": {
							"options": {
								"responses": {
									"200": {
										"headers": {
											"Access-Control-Allow-Origin": {
												"type": "string"
											},
											"Access-Control-Allow-Methods": {
												"type": "string"
											},
											"Access-Control-Allow-Headers": {
												"type": "string"
											}
										},
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"x-amazon-apigateway-integration": {
									"type": "mock",
									"passthroughBehavior": "when_no_match",
									"requestTemplates": {
										"application/json": "{\"statusCode\": 200}"
									},
									"responses": {
										"default": {
											"responseParameters": {
												"method.response.header.Access-Control-Allow-Origin": "'*'",
												"method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
												"method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
											},
											"statusCode": "200"
										}
									}
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							},
							"get": {
								"responses": {
									"200": {
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"security": [{
									"CognitoAuthorizer": []
								}],
								"x-amazon-apigateway-integration": {
									"contentHandling": "CONVERT_TO_TEXT",
									"responses": {
										"default": {
											"statusCode": "200"
										}
									},
									"uri": {
										"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
									},
									"httpMethod": "POST",
									"passthroughBehavior": "when_no_match",
									"type": "aws_proxy"
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							}
						},
						"/runredshiftcrawler": {
							"options": {
								"responses": {
									"200": {
										"headers": {
											"Access-Control-Allow-Origin": {
												"type": "string"
											},
											"Access-Control-Allow-Methods": {
												"type": "string"
											},
											"Access-Control-Allow-Headers": {
												"type": "string"
											}
										},
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"x-amazon-apigateway-integration": {
									"type": "mock",
									"passthroughBehavior": "when_no_match",
									"requestTemplates": {
										"application/json": "{\"statusCode\": 200}"
									},
									"responses": {
										"default": {
											"responseParameters": {
												"method.response.header.Access-Control-Allow-Origin": "'*'",
												"method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
												"method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
											},
											"statusCode": "200"
										}
									}
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							},
							"get": {
								"responses": {
									"200": {
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"security": [{
									"CognitoAuthorizer": []
								}],
								"x-amazon-apigateway-integration": {
									"contentHandling": "CONVERT_TO_TEXT",
									"responses": {
										"default": {
											"statusCode": "200"
										}
									},
									"uri": {
										"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
									},
									"httpMethod": "POST",
									"passthroughBehavior": "when_no_match",
									"type": "aws_proxy"
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							}
						},
						"/create_run_publish_crawler": {
							"options": {
								"responses": {
									"200": {
										"headers": {
											"Access-Control-Allow-Origin": {
												"type": "string"
											},
											"Access-Control-Allow-Methods": {
												"type": "string"
											},
											"Access-Control-Allow-Headers": {
												"type": "string"
											}
										},
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"x-amazon-apigateway-integration": {
									"type": "mock",
									"passthroughBehavior": "when_no_match",
									"requestTemplates": {
										"application/json": "{\"statusCode\": 200}"
									},
									"responses": {
										"default": {
											"responseParameters": {
												"method.response.header.Access-Control-Allow-Origin": "'*'",
												"method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
												"method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
											},
											"statusCode": "200"
										}
									}
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							},
							"get": {
								"responses": {
									"200": {
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"security": [{
									"CognitoAuthorizer": []
								}],
								"x-amazon-apigateway-integration": {
									"contentHandling": "CONVERT_TO_TEXT",
									"responses": {
										"default": {
											"statusCode": "200"
										}
									},
									"uri": {
										"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
									},
									"httpMethod": "POST",
									"passthroughBehavior": "when_no_match",
									"type": "aws_proxy"
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							}
						},
						"/add-incremental_data": {
							"options": {
								"responses": {
									"200": {
										"headers": {
											"Access-Control-Allow-Origin": {
												"type": "string"
											},
											"Access-Control-Allow-Methods": {
												"type": "string"
											},
											"Access-Control-Allow-Headers": {
												"type": "string"
											}
										},
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"x-amazon-apigateway-integration": {
									"type": "mock",
									"passthroughBehavior": "when_no_match",
									"requestTemplates": {
										"application/json": "{\"statusCode\": 200}"
									},
									"responses": {
										"default": {
											"responseParameters": {
												"method.response.header.Access-Control-Allow-Origin": "'*'",
												"method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
												"method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
											},
											"statusCode": "200"
										}
									}
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							},
							"get": {
								"responses": {
									"200": {
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"security": [{
									"CognitoAuthorizer": []
								}],
								"x-amazon-apigateway-integration": {
									"contentHandling": "CONVERT_TO_TEXT",
									"responses": {
										"default": {
											"statusCode": "200"
										}
									},
									"uri": {
										"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
									},
									"httpMethod": "POST",
									"passthroughBehavior": "when_no_match",
									"type": "aws_proxy"
								},
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								]
							}
						}
					},
					"schemes": [
						"https"
					],
					"securityDefinitions": {
						"CognitoAuthorizer": {
							"x-amazon-apigateway-authtype": "cognito_user_pools",
							"type": "apiKey",
							"name": "Authorization",
							"x-amazon-apigateway-authorizer": {
								"providerARNs": [{
									"Fn::GetAtt": [
										"CognitoStack",
										"Outputs.UserPoolARN"
									]
								}],
								"type": "cognito_user_pools"
							},
							"in": "header"
						}
					},
					"x-amazon-apigateway-binary-media-types": [
						"application/octet-stream",
						"application/x-tar",
						"application/zip",
						"audio/basic",
						"audio/ogg",
						"audio/mp4",
						"audio/mpeg",
						"audio/wav",
						"audio/webm",
						"image/png",
						"image/jpg",
						"image/gif",
						"video/ogg",
						"video/mpeg",
						"video/webm"
					],
					"definitions": {
						"Empty": {
							"type": "object",
							"title": "Empty Schema"
						}
					},
					"swagger": "2.0"
				},
				"StageName": "api"
			}
		},
		"InvokeLambdaStack": {
			"Type": "AWS::CloudFormation::Stack",
			"DependsOn": [
				"APIHandler",
				"RestAPI"
			],
			"Properties": {
				"Parameters": {
					"RoleARN": {
						"Fn::GetAtt": [
							"IAMRolesStack",
							"Outputs.kinesisLambdaS3RoleARN"
						]
					},
					"DestinationResourceBucket": {
						"Ref": "WebsiteHostingbucket"
					},
					"RawBucket": {
						"Ref": "RawBucket"
					},
					"DataCleaningApplication": {
						"Fn::GetAtt": [
							"kinsesisStack",
							"Outputs.DataCleaningApplication"
						]
					},
					"DataAggregationApplication": {
						"Fn::GetAtt": [
							"kinsesisStack",
							"Outputs.DataAggregationApplication"
						]
					},
					"DataCleaningInputStream": {
						"Fn::GetAtt": [
							"kinsesisStack",
							"Outputs.DataCleaningInputStream"
						]
					},
					"DataCleaningOutputStream": {
						"Fn::GetAtt": [
							"kinsesisStack",
							"Outputs.DataCleaningOutputStream"
						]
					},
					"DataAggregationOutputStream1": {
						"Fn::GetAtt": [
							"kinsesisStack",
							"Outputs.DataAggregationOutputStream1"
						]
					},
					"DataAggregationOutputStream2": {
						"Fn::GetAtt": [
							"kinsesisStack",
							"Outputs.DataAggregationOutputStream2"
						]
					},
					"USERPOOLID": {
						"Fn::GetAtt": [
							"CognitoStack",
							"Outputs.UserPoolId"
						]
					},
					"USERPOOLCLIENTID": {
						"Fn::GetAtt": [
							"CognitoStack",
							"Outputs.UserPoolClient"
						]
					},
					"IdentityPoolId": {
						"Fn::GetAtt": [
							"CognitoStack",
							"Outputs.IdentityPoolId"
						]
					},
					"UserPoolProviderName": {
						"Fn::GetAtt": [
							"CognitoStack",
							"Outputs.UserPoolProviderName"
						]
					},
					"UserPoolARN": {
						"Fn::GetAtt": [
							"CognitoStack",
							"Outputs.UserPoolARN"
						]
					},
					"UserPoolName": {
						"Fn::GetAtt": [
							"CognitoStack",
							"Outputs.UserPoolClient"
						]
					},
					"ENDPOINTURL": {
						"Fn::Join": [
							"", [
								"https://",
								{
									"Ref": "RestAPI"
								},
								".execute-api.",
								{
									"Ref": "AWS::Region"
								},
								".amazonaws.com/api/"
							]
						]
					},
					"Username": {
						"Ref": "CognitoUserName"
					},
					"Password": {
						"Ref": "CognitoPassword"
					},
					"RawCrawler": {
						"Fn::GetAtt": [
							"GlueStack",
							"Outputs.RawCrawler"
						]
					},
					"TransformedCrawler": {
						"Fn::GetAtt": [
							"GlueStack",
							"Outputs.TransformedCrawler"
						]
					},
					"PublishedCrawler": {
						"Fn::GetAtt": [
							"GlueStack",
							"Outputs.PublishedCrawler"
						]
					},
					"RedshiftCrawler": {
						"Fn::GetAtt": [
							"GlueStack",
							"Outputs.RedshiftCrawler"
						]
					},
					"RawToTransformedJob": {
						"Fn::GetAtt": [
							"GlueStack",
							"Outputs.RawToTransformedJob"
						]
					},
					"TransformedToPublishedJob": {
						"Fn::GetAtt": [
							"GlueStack",
							"Outputs.TransformedToPublishedJob"
						]
					},
					"TransformedToRedshiftJob": {
						"Fn::GetAtt": [
							"GlueStack",
							"Outputs.TransformedToRedshiftJob"
						]
					},
					"RedshiftAnalyticsQueriesJob": {
						"Fn::GetAtt": [
							"GlueStack",
							"Outputs.RedshiftAnalyticsQueriesJob"
						]
					},
					"RedshiftToTransformedJob": {
						"Fn::GetAtt": [
							"GlueStack",
							"Outputs.RedshiftToTransformedJob"
						]
					},
					"RedshiftSpectrumCreateExternalSchemaJob": {
						"Fn::GetAtt": [
							"GlueStack",
							"Outputs.RedshiftSpectrumCreateExternalSchemaJob"
						]
					},
					"ConnectionURL": {
						"Fn::GetAtt": [
							"RedshiftStack",
							"Outputs.ConnectionURL"
						]
					},
					"RedshiftUsername": {
						"Ref": "RedshiftUsername"
					},
					"RedshiftPassword": {
						"Ref": "RedshiftPassword"
					},
					"KibanaURL": {
						"Fn::GetAtt": [
							"ElasticsearchStack",
							"Outputs.KibanaURL"
						]
					},
					"StreamMetaDataURL": {
						"Fn::GetAtt": [
							"ElasticsearchStack",
							"Outputs.StreamMetaDataURL"
						]
					},
					"GlueEndPOint": {
						"Fn::Join": [
							"", [
								"https://glue.",
								{
									"Ref": "AWS::Region"
								},
								".amazonaws.com"
							]
						]
					}
				},
				"TemplateURL": {
					"Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/lambda.json"
				}
			}
		}
	},
	"Outputs": {
		"WebsiteURL": {
			"Value": {
				"Fn::GetAtt": [
					"WebsiteHostingbucket",
					"WebsiteURL"
				]
			},
			"Description": "URL for the website hosted on S3 and use /register.html for registration"
		},
		"RedshfitConnectionURL": {
			"Value": {
				"Fn::GetAtt": [
					"RedshiftStack",
					"Outputs.ConnectionURL"
				]
			}
		},
		"KibanaURL": {
			"Description": "Kibana URL",
			"Value": {
				"Fn::Join": [
					"", [{
							"Fn::GetAtt": [
								"ElasticsearchStack",
								"Outputs.StreamMetaDataURL"
							]
						},
						"/_plugin/kibana/app/kibana#/dashboard/Stream-Data-Lake-Metadata"
					]
				]
			}
		}
	}
}